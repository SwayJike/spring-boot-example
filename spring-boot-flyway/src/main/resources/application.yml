# 应用服务 WEB 访问端口
server:
  port: 8080

# spring配置
spring:
  application:
    name: spring-boot-flyway
  # 数据库配置
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    url: jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=utf8&autoReconnect=true&allowMultiQueries=true&useSSL=false&tinyInt1isBit=false&serverTimezone=GMT%2B8
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: root
    password: root
  # flyway 配置
  flyway:
    # 启用或禁用 flyway
    enabled: true
    # flyway 的 clean 命令会删除指定 schema 下的所有 table,生产务必禁掉.这个默认值是 false 理论上作为默认配置是不科学的.
    clean-disabled: true
    # 迁移发现数据库非空且存在没有元数据的表时,自动执行基准迁移,新建flyway_schema_history表
    baseline-on-migrate: true
    # 字符编码 默认 UTF-8
    #    encoding: UTF-8
    # SQL 脚本的目录,多个路径使用逗号分隔 默认值 classpath:db/migration
    #    locations: classpath:db/migration
    # sql文件名称的前缀,默认V
    #    sql-migration-prefix: V
    # 迁移sql脚本文件名称的分隔符，默认2个下划线__
    #    sql-migration-separator: __
    # 迁移sql脚本文件名称的后缀
    #    sql-migration-suffixes: .sql
    # 执行迁移时是否自动调用验证,当你的版本不符合逻辑,比如你先执行了DML而没有对应的DDL会抛出异常
    #    validate-on-migrate: true
    #  metadata 版本控制信息表 默认 flyway_schema_history
    #    table: flyway_schema_history
    # 指定 baseline 的版本号,默认值为 1,低于该版本号的 SQL 文件,migrate 时会被忽略
    #    baseline-version: 1
    # 是否允许不按顺序迁移,默认值为 false,生产建议 false
    #    out-of-order: false
    # 需要 flyway 管控的 schema list,这里我们配置为flyway  缺省的话,使用spring.datasource.url 配置的那个 schema,
    # 可以指定多个schema,但仅会在第一个schema下建立 metadata 表,也仅在第一个schema应用migration sql 脚本.
    # 但flyway clean 命令会依次在这些schema下都执行一遍. 所以 确保生产 spring.flyway.clean-disabled 为 true
    #    schemas: flyway
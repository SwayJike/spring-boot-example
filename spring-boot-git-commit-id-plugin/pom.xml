<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.jourwon.spring.boot</groupId>
        <artifactId>spring-boot-example</artifactId>
        <version>1.0.0</version>
    </parent>
    <artifactId>spring-boot-git-commit-id-plugin</artifactId>
    <version>1.0.0</version>
    <name>spring-boot-git-commit-id-plugin</name>
    <description>Spring Boot整合git插件,将项目打包为tar.gz,并带上git版本号,然后通过sh脚本快速部署</description>

    <dependencies>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>

        <!-- springboot相关 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- nacos -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
        </dependency>
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
        </dependency>

        <!-- 需要引入该jar才能使bootstrap配置文件生效 -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-bootstrap</artifactId>
        </dependency>
    </dependencies>

    <build>
        <finalName>${project.artifactId}-${project.version}</finalName>
        <plugins>
            <!-- git提交版本插件 -->
            <plugin>
                <groupId>pl.project13.maven</groupId>
                <artifactId>git-commit-id-plugin</artifactId>
                <version>4.0.5</version>
                <executions>
                    <execution>
                        <id>get-the-git-infos</id>
                        <goals>
                            <!-- 目标：revision -->
                            <goal>revision</goal>
                        </goals>
                        <!-- 默认是initialize阶段执行，可以修改为其他阶段 -->
                        <phase>initialize</phase>
                    </execution>
                    <!--<execution>
                        <id>validate-the-git-infos</id>
                        <goals>
                            &lt;!&ndash; 目标：validateRevision &ndash;&gt;
                            <goal>validateRevision</goal>
                        </goals>
                        &lt;!&ndash; 默认是打包阶段执行，可以修改为其他 &ndash;&gt;
                        <phase>package</phase>
                    </execution>-->
                </executions>
                <configuration>
                    <!-- 需要检查的仓库根目录，默认：${project.basedir}/.git，${project.basedir}：项目根目录，即包含pom.xml文件的目录 -->
                    <dotGitDirectory>${project.basedir}/.git</dotGitDirectory>
                    <!-- true：扫描路径时打印更多信息，默认false -->
                    <verbose>true</verbose>
                    <!-- 定义插件中使用日期的格式，默认值：yyyy-MM-dd’T’HH:mm:ssZ -->
                    <dateFormat>yyyyMMddHHmmss</dateFormat>
                    <!-- git属性文件中各属性前缀，默认值git，可以不配置 -->
                    <prefix>git</prefix>
                    <!--git版本，默认7个字符-->
                    <abbrevLength>7</abbrevLength>
                    <!-- 生成git属性文件，默认false：不生成 -->
                    <generateGitPropertiesFile>true</generateGitPropertiesFile>
                    <!-- 生成git属性文件路径及文件名，默认${project.build.outputDirectory}/git.properties -->
                    <generateGitPropertiesFilename>${project.build.outputDirectory}/version.properties
                    </generateGitPropertiesFilename>
                    <!-- 生成git属性文件格式，默认值properties -->
                    <format>properties</format>
                    <!-- true：将git属性注入所有项目，默认false-->
                    <injectAllReactorProjects>true</injectAllReactorProjects>
                    <!-- 需要保存到文件中的属性列表 -->
                    <includeOnlyProperties>
                        <includeOnlyProperty>git.build.version</includeOnlyProperty>
                        <includeOnlyProperty>git.branch</includeOnlyProperty>
                        <includeOnlyProperty>git.commit.time</includeOnlyProperty>
                        <includeOnlyProperty>git.commit.id.abbrev</includeOnlyProperty>
                    </includeOnlyProperties>
                </configuration>
            </plugin>

            <!-- 支持定制化打包方式，例如 apache 项目的打包方式 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>3.3.0</version>
                <configuration>
                    <encoding>UTF-8</encoding>
                    <finalName>${project.artifactId}</finalName>
                    <!-- 包名不含assemblyId -->
                    <appendAssemblyId>false</appendAssemblyId>
                    <skipAssembly>false</skipAssembly>
                    <!-- 如果路径长度超过100字符,执行的操作warn" (default), "fail", "truncate", "gnu", or "omit". -->
                    <tarLongFileMode>gnu</tarLongFileMode>
                    <outputDirectory>target</outputDirectory>
                    <descriptors>
                        <!-- 配置描述文件路径 -->
                        <descriptor>src/main/assembly/package.xml</descriptor>
                    </descriptors>
                </configuration>
                <executions>
                    <execution>
                        <!-- ID 标识 -->
                        <id>make-assembly</id>
                        <!-- 绑定到package生命周期阶段上 -->
                        <phase>package</phase>
                        <goals>
                            <!-- 在 PACKAGE 生命周期阶段仅执行一次 -->
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- 支持yaml读取pom的参数 -->
            <!--<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <encoding>UTF-8</encoding>
                    <delimiters>
                        <delimiter>@</delimiter>
                    </delimiters>
                    <useDefaultDelimiters>false</useDefaultDelimiters>
                </configuration>
            </plugin>-->
        </plugins>

        <!-- 指定filtering=true. maven的占位符解析表达式就可以用于它里面的文件 -->
        <resources>
            <resource>
                <!-- 指定resources插件处理哪个目录下的资源文件 -->
                <directory>src/main/resources</directory>
                <!-- 打开资源过滤功能 -->
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>

</project>

# kafka配置
spring:
  kafka:
    # kafka服务的ip端口,集群用逗号分隔的主机:端口对列表
    bootstrap-servers: 172.25.21.123:9092
    producer:
      #producer要求leader在考虑完成请求之前收到的确认数，用于控制发送记录在服务端的持久化，默认为1，其值可以为如下：
      #acks = 0 如果设置为零，则生产者将不会等待来自服务器的任何确认，该记录将立即添加到套接字缓冲区并视为已发送。在这种情况下，无法保证服务器已收到记录，并且重试配置将不会生效（因为客户端通常不会知道任何故障），为每条记录返回的偏移量始终设置为-1。安全性最低但是效率最高。
      #acks = 1 这意味着leader会将记录写入其本地日志，但无需等待所有副本服务器的完全确认即可做出回应，在这种情况下，如果leader在确认记录后立即失败，但在将数据复制到所有的副本服务器之前，则记录将会丢失。
      #acks = -1或all 这意味着leader将等待完整的同步副本集以确认记录，这保证了只要至少一个同步副本服务器仍然存活，记录就不会丢失，这是最强有力的保证，这相当于acks = -1的设置。安全性最高，但是效率最低。
      acks: 1
      # 大于零时，启用失败发送的重试次数，默认2147483647
      retries: 3
      # 当多个消息要发送到相同分区的时，生产者尝试将消息批量打包在一起，以减少请求交互。不会打包大于此配置大小的消息。
      # 这有助于提升客户端和服务端之间的性能，此配置控制默认批量大小（以字节为单位），默认值为16384，即16KB
      batch-size: 16384
      # 生产者可用于缓冲等待发送到服务器的记录的内存总字节数，默认33554432bytes=32MB
      buffer-memory: 33554432
      # 指定消息key和消息体的编解码方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      properties:
        # 控制生产者最大发送大小，默认1048576(1MB)。这个值必须小于kafka服务器server.properties配置文件里的最大可接收数据大小配置：socket.request.max.bytes=
        max.request.size: 1048576
        # 一个批次最长等待多久就发送数据，默认0，即马上发送，延迟为100毫秒，启用该功能能有效减少生产者发送消息次数，从而提高并发量
        linger.ms: 100
    consumer:
      # 相同的Topic下，相同的群组ID，只有一个消费者能消费到消息
      group-id: group_id
      # 当Kafka中没有初始偏移或服务器上不再存在当前偏移时策略设置，默认值latest
      # (1)、earliest：当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，从头开始消费
      # (2)、latest：当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，消费新产生的该分区下的数据
      # (3)、none：topic各分区都存在已提交的offset时，从offset后开始消费；只要有一个分区不存在已提交的offset，则抛出异常
      auto-offset-reset: latest
      # 是否自动提交偏移，默认true。偏移量自己控制，可以有效避免重复读、漏读
      enable-auto-commit: true
      # 如果“enable.auto.commit”设置为true，消费者偏移自动提交给Kafka的频率（以毫秒为单位），默认值为5000
      auto-commit-interval: 100
      # 与消费者协调员之间心跳的预期时间（以毫秒为单位），默认值为3000
      heartbeat-interval: 3000
      # 每次fetch请求时，server应该返回的最小字节数。如果没有足够的数据返回，请求会等待，直到足够的数据才会返回。默认：1
      fetch-min-size: 1
      # Fetch请求发给broker后，在broker中可能会被阻塞的（当topic中records的总size小于fetch.min.bytes时），此时这个fetch请求耗时就会比较长。这个配置就是来配置consumer最多等待response多久。
      fetch-max-wait: 500
      # 单次调用 poll() 时返回的最大记录数，默认500。
      max-poll-records: 500
      # 指定消息key和消息体的编解码方式
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        # consumer是通过拉取的方式向服务端拉取数据，当超过指定时间间隔max.poll.interval.ms没有向服务端发送poll()请求，而心跳heartbeat线程仍然在继续，会认为该consumer锁死，就会将该consumer退出group，并进行再分配。默认：300000
        max.poll.interval.ms: 300000
        # 会话的超时限制。如果consumer在这段时间内没有发送心跳信息，则它会被认为挂掉了，并且reblance将会产生，必须在[group.min.session.timeout.ms, group.max.session.timeout.ms]范围内。默认：10000
        session.timeout.ms: 10000
        # 一次fetch请求，从一个broker中取得的records最大大小。如果在从topic中第一个非空的partition取消息时，如果取到的第一个record的大小就超过这个配置时，仍然会读取这个record，也就是说在这片情况下，只会返回这一条record。默认：50 * 1024 * 1024 = 52428800
        fetch.max.bytes: 52428800

